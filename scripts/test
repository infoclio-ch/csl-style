#!/usr/bin/env python3

import os, sys
import argparse
import glob
from itertools import chain
import subprocess
import json
import difflib

from utils import get_styles


def run_one_test(test_in, all_styles, quiet=False):
    n_tests = 0
    n_succeeded = 0
    n_failed = 0
    n_warnings = 0

    styles = all_styles
    test_out = test_in.replace(".in.json", ".out.json")
    tests_out = [test_out,]

    if not os.path.exists(test_out):
        if len(styles) == 1:
            sys.stderr.write(f"Warning: no out file matching {test_in}\n")
            n_warnings += 1
            return (n_tests, n_succeeded, n_failed, n_warnings)
        else:
            # general tests, but specific outputs, find the outputs and the matching styles
            styles = {}
            tests_out = []
            for t in glob.iglob(test_in.replace(".in.json", "") + ".*.out.json"):
                identifier = t.split(".")[-3]
                if identifier in all_styles:
                    tests_out.append(t)
                    styles[identifier] = all_styles[identifier]
                else:
                    sys.stderr.write(f"Warning: no style matching {identifier} (in {t})\n")
                    n_warnings += 1
                    return (n_tests, n_succeeded, n_failed, n_warnings)
    elif len(styles) > 1:
        # specific test and specific output
        styles = {}
        identifier = test_out.split(".")[-3]
        styles[identifier] = all_styles[identifier]

    if not styles:
        print(f"Warning: no styles found to test {test_in}")
        n_warnings += 1
        return (n_tests, n_succeeded, n_failed, n_warnings)

    for identifier, style in styles.items():
        if len(tests_out) == 1:
            test_out = tests_out[0]
        else:
            test_out = next(t for t in tests_out if t.endswith(f"{identifier}.out.json"))

        with open(test_out) as f:
            expected = json.load(f)

        cmd = ['citeproc']
        refs = "tests/references.json"
        if os.path.exists(refs):
            cmd += ['--references', refs]
        cmd += ['--style', style, test_in]
        output = subprocess.run(
            cmd,
            capture_output=True,
            encoding='utf-8',
        )
        n_tests += 1
        try:
            results = json.loads(output.stdout)
        except json.decoder.JSONDecodeError as e:
            sys.stderr.write(f"Warning: could not parse output from `citeproc' for {test_in}.\n")
            sys.stderr.write(f"citeproc returned following error: {output.stderr}\n\n")
            n_warnings += 1
            continue

        if results['warnings']:
            for w in results['warnings']:
                sys.stderr.write(f"Warning: “{w}” (returned by `citeproc' for {test_in})\n")
            n_warnings += 1
            continue

        for k in expected:
            if results[k] != expected[k]:
                n_failed += 1
                if not quiet:
                    diff = difflib.unified_diff(
                        expected[k],
                        results[k],
                        test_out,
                        f'actual output from {style}',
                        n=0,
                        lineterm=""
                    )
                    sys.stdout.write("\n".join(diff) + "\n")
                break
        else:
            # loop not broken
            n_succeeded += 1

    return (n_tests, n_succeeded, n_failed, n_warnings)


def run_tests(tests_in, stop_early=False, quiet_tests=False):
    all_styles = get_styles()

    if not tests_in:
        tests_in = sorted(glob.glob("tests/*.in.json"))

    n_tests = 0
    n_succeeded = 0
    n_failed = 0
    n_warnings = 0

    for test_in in tests_in:
        t, s, f, w = run_one_test(test_in, all_styles, quiet_tests)
        n_tests += t
        n_succeeded += s
        n_failed += f
        n_warnings += w

        if f and stop_early:
            break

    print(f"Ran {n_tests} tests: {n_succeeded} succeeded, {n_failed} failed.")
    if n_warnings == 1:
        print("There was 1 warning!")
    elif n_warnings > 1:
        print(f"There were {n_warnings} warnings!")


def main():
    parser = argparse.ArgumentParser(description="Run tests")
    parser.add_argument("-s", "--early-stop", action='store_true',
                        help="stop after first failed test")
    parser.add_argument("--summary", action="store_true",
                        help="only report number of tests, failures and warnings")
    parser.add_argument("tests_in", metavar="TESTS", nargs='*',
                        help="specific test files to run")
    args = parser.parse_args()

    run_tests(args.tests_in, args.early_stop, args.summary)


if __name__ == '__main__':
    main()
